{"version":3,"sources":["webpack:///static/1.ba43deb8.chunk.js","webpack:///./catalog/react.md?b730","webpack:///./catalog/react.md"],"names":["webpackJsonp","782","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","792"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAgBD,EAAQ,IACxBE,EAA2BF,EAAQ,IACnCG,EAAuBH,EAAQ,KAASG,YACxCA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAST,EAAQ,OAEjCU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/1.ba43deb8.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 782:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(15);\n    var createReactClass = __webpack_require__(45);\n    var PageRenderer = __webpack_require__(286).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(792)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../node_modules/raw-loader/index.js!./react.md\", function() {\n            component.setState({\n              content: require(\"!!../node_modules/raw-loader/index.js!./react.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 792:\n/***/ (function(module, exports) {\n\nmodule.exports = \"> The React Specimen lets you document and build React components.\\n\\n### Props\\n\\n- `noSource: boolean` Removes the source code toggle button\\n- `showSource: boolean` Shows the source code section by default\\n- `frame: boolean` Wraps output in an `<iframe>` (to prevent style collisions and allow for viewport-relative styling (e.g. using `vw` or `position: fixed`))\\n- `responsive: boolean | string | array` sets a fixed screen size or allows switching between multiple sizes\\n- `light: boolean` a light checkered background (default)\\n- `dark: boolean` a dark checkered background\\n- `plain: boolean` a transparent background without any padding\\n- `span: number[1–6]` width of the specimen\\n\\n```hint|directive\\nTo make your app's components available to the React Specimen, [import them in your configuration](/configuration#imports)\\n```\\n\\n### Plain\\n\\nJust write JSX code in the specimen content.\\n\\n````\\n```react\\n<MyCoolComponent>My cool component</MyCoolComponent>\\n```\\n````\\n\\n### With State\\n\\nFor documenting interactive components, the React Specimen provides local state and a `setState` function to the specimen code.\\n\\nTo set the initial state, declare a `state` property with the desired shape (remember, you can use YAML or JSON).\\n\\n````\\n```react\\nstate: {foo: 0}\\n---\\n<MyCoolComponent\\n  onChange={() => setState({foo: state.foo + 1})}\\n>\\n  {state.foo}\\n</MyCoolComponent>\\n```\\n````\\n\\n\\n\\n\\n\\n### Responsive Display\\n\\nBy defining the 'responsiveSizes' option, you can display a component in various\\nscreen sizes. In order to use sizes other than `small, medium, large` and `xlarge`,\\nplease refer to the [responsive section](configuration#responsivesizes) on the catalog\\nconfiguration page.\\n\\n#### Display all defined screen sizes\\n\\nPassing `true` for the responsive prop allows tabbing though all of them.\\n\\n#### Display only a subset of defined screen sizes\\n\\nPassing an array of strings limits the tabs to only those specified, eg. `['small','xlarge']`.\\n\\n#### Display a single screen size\\n\\nIn order to use a single screen size, you can pass the matching string. Along\\nwith setting a span, it is possible to show two screens next to each other for\\ndirect comparison.\\n\\n\\n\\n\\n### Examples\\n\\n#### With State\\n\\n```react\\nstate: {clicked: 0}\\n---\\n<button onClick={() => setState({clicked: state.clicked + 1})}>\\n  Clicked {state.clicked} times\\n</button>\\n```\\n\\n\\n#### Display all defined screen sizes\\n\\n```react|noSource\\nresponsive: true\\n---\\n<div>\\n<style>{`\\n.responsive-playground-example {\\n  font-family: Helvetica;\\n  margin: auto;\\n  padding: 24px;\\n  text-align: center;\\n  background-color: #c2d8ea; /* ixt-blue-100 */\\n  color: #003B5C;\\n}\\n.responsive-playground-example > h1 {\\n  font-size: 24px;\\n  font-weight: 500;\\n  margin-bottom: 12px;\\n}\\n.responsive-playground-example > p {\\n  font-size: 16px;\\n  padding-bottom: 12px;\\n}\\n\\n.grid {\\n  display: flex;\\n  flex-direction: column;\\n  flex-wrap: wrap;\\n  justify-content: space-around;\\n}\\n.box {\\n  flex-grow: 1;\\n  height: 72px;\\n  margin-bottom: 12px;\\n  background-color: #205779;\\n}\\n.box:last-child {\\n  margin: 0;\\n}\\n\\n@media (min-width: 1024px) {\\n  .grid {\\n    flex-direction: row;\\n  }\\n  .box {\\n    width: 320px;\\n    height: 144px;\\n    margin: 0;\\n    margin-right: 12px;\\n    background-color: #205779;\\n  }\\n  .box:nth-child(2){\\n    margin: 0;\\n    margin-bottom: 12px;\\n  }\\n}\\n\\n@media (min-width: 1440px) {\\n  .responsive-playground-example p {\\n    padding: 0 16em;\\n    padding-bottom: 12px;\\n  }\\n  .box {\\n    margin: 0;\\n    margin-right: 12px;\\n  }\\n  .box:nth-child(2){\\n    margin: 0;\\n    margin-right: 12px;\\n  }\\n}\\n`}</style>\\n<div className='responsive-playground-example'>\\n  <h1>Responsive Grid Example</h1>\\n  <div className='grid'>\\n    <div className='box'></div>\\n    <div className='box'></div>\\n    <div className='box'></div>\\n    <div className='box'></div>\\n  </div>\\n</div>\\n</div>\\n```\\n\\n````\\n```react\\nresponsive: true\\nstate: {clicked: 0}\\n---\\n<div>\\n<style>{`\\n.box {\\n  background: black;\\n  width: 100vw;\\n  height: 100%;\\n  padding:25px;\\n  box-sizing: border-box;\\n  color: white;\\n  text-align: center;\\n  font-family: 'Helvetica';\\n  transition: .7s background;\\n}\\n@media (min-width: 360px) {\\n  .box {\\n    background: #2BF1D3;\\n    color: #482AC6;\\n    text-align: left;\\n  }\\n}\\n@media (min-width: 1024px) {\\n  .box {\\n    background: #CED3DF;\\n    color: #482AC6;\\n  }\\n}\\n@media (min-width: 1440px) {\\n  .box {\\n    background: tomato;\\n    color: purple;\\n  }\\n}\\n@media (min-width: 1920px) {\\n  .box {\\n    background: purple;\\n    color: #2BF1D3;\\n    font-family: 'Georgia';\\n  }\\n}\\n`}</style>\\n<div className='box'>\\n    <h1>Hello World</h1>\\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\\n</div>\\n</div>\\n```\\n````\\n\\n\\n### Display a single screen size\\n\\n```react\\nresponsive: small\\nspan: 2\\nstate: {clicked: 0}\\n---\\n<div style={{background: '#ffffff', height: '100%'}}>\\n  <button onClick={() => setState({clicked: state.clicked + 1})}>\\n    Clicked {state.clicked < 100 ? state.clicked : 'an unhealthy amount of'} times\\n  </button>\\n</div>\\n```\\n\\n```react\\nresponsive: ['medium', 'xlarge']\\nspan: 4\\nstate: {clicked: 0}\\n---\\n<div style={{background: '#ffffff', height: '100%'}}>\\n  <button onClick={() => setState({clicked: state.clicked + 1})}>\\n    Clicked {state.clicked < 100 ? state.clicked : 'an unhealthy amount of'} times\\n  </button>\\n</div>\\n```\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/1.ba43deb8.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../node_modules/raw-loader/index.js!./react.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../node_modules/raw-loader/index.js!./react.md\", function() {\n            component.setState({\n              content: require(\"!!../node_modules/raw-loader/index.js!./react.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/react.md\n// module id = 782\n// module chunks = 1","module.exports = \"> The React Specimen lets you document and build React components.\\n\\n### Props\\n\\n- `noSource: boolean` Removes the source code toggle button\\n- `showSource: boolean` Shows the source code section by default\\n- `frame: boolean` Wraps output in an `<iframe>` (to prevent style collisions and allow for viewport-relative styling (e.g. using `vw` or `position: fixed`))\\n- `responsive: boolean | string | array` sets a fixed screen size or allows switching between multiple sizes\\n- `light: boolean` a light checkered background (default)\\n- `dark: boolean` a dark checkered background\\n- `plain: boolean` a transparent background without any padding\\n- `span: number[1–6]` width of the specimen\\n\\n```hint|directive\\nTo make your app's components available to the React Specimen, [import them in your configuration](/configuration#imports)\\n```\\n\\n### Plain\\n\\nJust write JSX code in the specimen content.\\n\\n````\\n```react\\n<MyCoolComponent>My cool component</MyCoolComponent>\\n```\\n````\\n\\n### With State\\n\\nFor documenting interactive components, the React Specimen provides local state and a `setState` function to the specimen code.\\n\\nTo set the initial state, declare a `state` property with the desired shape (remember, you can use YAML or JSON).\\n\\n````\\n```react\\nstate: {foo: 0}\\n---\\n<MyCoolComponent\\n  onChange={() => setState({foo: state.foo + 1})}\\n>\\n  {state.foo}\\n</MyCoolComponent>\\n```\\n````\\n\\n\\n\\n\\n\\n### Responsive Display\\n\\nBy defining the 'responsiveSizes' option, you can display a component in various\\nscreen sizes. In order to use sizes other than `small, medium, large` and `xlarge`,\\nplease refer to the [responsive section](configuration#responsivesizes) on the catalog\\nconfiguration page.\\n\\n#### Display all defined screen sizes\\n\\nPassing `true` for the responsive prop allows tabbing though all of them.\\n\\n#### Display only a subset of defined screen sizes\\n\\nPassing an array of strings limits the tabs to only those specified, eg. `['small','xlarge']`.\\n\\n#### Display a single screen size\\n\\nIn order to use a single screen size, you can pass the matching string. Along\\nwith setting a span, it is possible to show two screens next to each other for\\ndirect comparison.\\n\\n\\n\\n\\n### Examples\\n\\n#### With State\\n\\n```react\\nstate: {clicked: 0}\\n---\\n<button onClick={() => setState({clicked: state.clicked + 1})}>\\n  Clicked {state.clicked} times\\n</button>\\n```\\n\\n\\n#### Display all defined screen sizes\\n\\n```react|noSource\\nresponsive: true\\n---\\n<div>\\n<style>{`\\n.responsive-playground-example {\\n  font-family: Helvetica;\\n  margin: auto;\\n  padding: 24px;\\n  text-align: center;\\n  background-color: #c2d8ea; /* ixt-blue-100 */\\n  color: #003B5C;\\n}\\n.responsive-playground-example > h1 {\\n  font-size: 24px;\\n  font-weight: 500;\\n  margin-bottom: 12px;\\n}\\n.responsive-playground-example > p {\\n  font-size: 16px;\\n  padding-bottom: 12px;\\n}\\n\\n.grid {\\n  display: flex;\\n  flex-direction: column;\\n  flex-wrap: wrap;\\n  justify-content: space-around;\\n}\\n.box {\\n  flex-grow: 1;\\n  height: 72px;\\n  margin-bottom: 12px;\\n  background-color: #205779;\\n}\\n.box:last-child {\\n  margin: 0;\\n}\\n\\n@media (min-width: 1024px) {\\n  .grid {\\n    flex-direction: row;\\n  }\\n  .box {\\n    width: 320px;\\n    height: 144px;\\n    margin: 0;\\n    margin-right: 12px;\\n    background-color: #205779;\\n  }\\n  .box:nth-child(2){\\n    margin: 0;\\n    margin-bottom: 12px;\\n  }\\n}\\n\\n@media (min-width: 1440px) {\\n  .responsive-playground-example p {\\n    padding: 0 16em;\\n    padding-bottom: 12px;\\n  }\\n  .box {\\n    margin: 0;\\n    margin-right: 12px;\\n  }\\n  .box:nth-child(2){\\n    margin: 0;\\n    margin-right: 12px;\\n  }\\n}\\n`}</style>\\n<div className='responsive-playground-example'>\\n  <h1>Responsive Grid Example</h1>\\n  <div className='grid'>\\n    <div className='box'></div>\\n    <div className='box'></div>\\n    <div className='box'></div>\\n    <div className='box'></div>\\n  </div>\\n</div>\\n</div>\\n```\\n\\n````\\n```react\\nresponsive: true\\nstate: {clicked: 0}\\n---\\n<div>\\n<style>{`\\n.box {\\n  background: black;\\n  width: 100vw;\\n  height: 100%;\\n  padding:25px;\\n  box-sizing: border-box;\\n  color: white;\\n  text-align: center;\\n  font-family: 'Helvetica';\\n  transition: .7s background;\\n}\\n@media (min-width: 360px) {\\n  .box {\\n    background: #2BF1D3;\\n    color: #482AC6;\\n    text-align: left;\\n  }\\n}\\n@media (min-width: 1024px) {\\n  .box {\\n    background: #CED3DF;\\n    color: #482AC6;\\n  }\\n}\\n@media (min-width: 1440px) {\\n  .box {\\n    background: tomato;\\n    color: purple;\\n  }\\n}\\n@media (min-width: 1920px) {\\n  .box {\\n    background: purple;\\n    color: #2BF1D3;\\n    font-family: 'Georgia';\\n  }\\n}\\n`}</style>\\n<div className='box'>\\n    <h1>Hello World</h1>\\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\\n</div>\\n</div>\\n```\\n````\\n\\n\\n### Display a single screen size\\n\\n```react\\nresponsive: small\\nspan: 2\\nstate: {clicked: 0}\\n---\\n<div style={{background: '#ffffff', height: '100%'}}>\\n  <button onClick={() => setState({clicked: state.clicked + 1})}>\\n    Clicked {state.clicked < 100 ? state.clicked : 'an unhealthy amount of'} times\\n  </button>\\n</div>\\n```\\n\\n```react\\nresponsive: ['medium', 'xlarge']\\nspan: 4\\nstate: {clicked: 0}\\n---\\n<div style={{background: '#ffffff', height: '100%'}}>\\n  <button onClick={() => setState({clicked: state.clicked + 1})}>\\n    Clicked {state.clicked < 100 ? state.clicked : 'an unhealthy amount of'} times\\n  </button>\\n</div>\\n```\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/react.md\n// module id = 792\n// module chunks = 1"],"sourceRoot":""}