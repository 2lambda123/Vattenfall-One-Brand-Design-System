webpackJsonp([1],{782:function(n,e,t){var o=t(15),i=t(45),a=t(286).PageRenderer;a.__esModule&&(a=a.default);var s=i({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(792)}},componentWillMount:function(){},render:function(){return o.createElement(a,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,n.exports=s},792:function(n,e){n.exports="> The React Specimen lets you document and build React components.\n\n### Props\n\n- `noSource: boolean` Removes the source code toggle button\n- `showSource: boolean` Shows the source code section by default\n- `frame: boolean` Wraps output in an `<iframe>` (to prevent style collisions and allow for viewport-relative styling (e.g. using `vw` or `position: fixed`))\n- `responsive: boolean | string | array` sets a fixed screen size or allows switching between multiple sizes\n- `light: boolean` a light checkered background (default)\n- `dark: boolean` a dark checkered background\n- `plain: boolean` a transparent background without any padding\n- `span: number[1\u20136]` width of the specimen\n\n```hint|directive\nTo make your app's components available to the React Specimen, [import them in your configuration](/configuration#imports)\n```\n\n### Plain\n\nJust write JSX code in the specimen content.\n\n````\n```react\n<MyCoolComponent>My cool component</MyCoolComponent>\n```\n````\n\n### With State\n\nFor documenting interactive components, the React Specimen provides local state and a `setState` function to the specimen code.\n\nTo set the initial state, declare a `state` property with the desired shape (remember, you can use YAML or JSON).\n\n````\n```react\nstate: {foo: 0}\n---\n<MyCoolComponent\n  onChange={() => setState({foo: state.foo + 1})}\n>\n  {state.foo}\n</MyCoolComponent>\n```\n````\n\n\n\n\n\n### Responsive Display\n\nBy defining the 'responsiveSizes' option, you can display a component in various\nscreen sizes. In order to use sizes other than `small, medium, large` and `xlarge`,\nplease refer to the [responsive section](configuration#responsivesizes) on the catalog\nconfiguration page.\n\n#### Display all defined screen sizes\n\nPassing `true` for the responsive prop allows tabbing though all of them.\n\n#### Display only a subset of defined screen sizes\n\nPassing an array of strings limits the tabs to only those specified, eg. `['small','xlarge']`.\n\n#### Display a single screen size\n\nIn order to use a single screen size, you can pass the matching string. Along\nwith setting a span, it is possible to show two screens next to each other for\ndirect comparison.\n\n\n\n\n### Examples\n\n#### With State\n\n```react\nstate: {clicked: 0}\n---\n<button onClick={() => setState({clicked: state.clicked + 1})}>\n  Clicked {state.clicked} times\n</button>\n```\n\n\n#### Display all defined screen sizes\n\n```react|noSource\nresponsive: true\n---\n<div>\n<style>{`\n.responsive-playground-example {\n  font-family: Helvetica;\n  margin: auto;\n  padding: 24px;\n  text-align: center;\n  background-color: #c2d8ea; /* ixt-blue-100 */\n  color: #003B5C;\n}\n.responsive-playground-example > h1 {\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 12px;\n}\n.responsive-playground-example > p {\n  font-size: 16px;\n  padding-bottom: 12px;\n}\n\n.grid {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: space-around;\n}\n.box {\n  flex-grow: 1;\n  height: 72px;\n  margin-bottom: 12px;\n  background-color: #205779;\n}\n.box:last-child {\n  margin: 0;\n}\n\n@media (min-width: 1024px) {\n  .grid {\n    flex-direction: row;\n  }\n  .box {\n    width: 320px;\n    height: 144px;\n    margin: 0;\n    margin-right: 12px;\n    background-color: #205779;\n  }\n  .box:nth-child(2){\n    margin: 0;\n    margin-bottom: 12px;\n  }\n}\n\n@media (min-width: 1440px) {\n  .responsive-playground-example p {\n    padding: 0 16em;\n    padding-bottom: 12px;\n  }\n  .box {\n    margin: 0;\n    margin-right: 12px;\n  }\n  .box:nth-child(2){\n    margin: 0;\n    margin-right: 12px;\n  }\n}\n`}</style>\n<div className='responsive-playground-example'>\n  <h1>Responsive Grid Example</h1>\n  <div className='grid'>\n    <div className='box'></div>\n    <div className='box'></div>\n    <div className='box'></div>\n    <div className='box'></div>\n  </div>\n</div>\n</div>\n```\n\n````\n```react\nresponsive: true\nstate: {clicked: 0}\n---\n<div>\n<style>{`\n.box {\n  background: black;\n  width: 100vw;\n  height: 100%;\n  padding:25px;\n  box-sizing: border-box;\n  color: white;\n  text-align: center;\n  font-family: 'Helvetica';\n  transition: .7s background;\n}\n@media (min-width: 360px) {\n  .box {\n    background: #2BF1D3;\n    color: #482AC6;\n    text-align: left;\n  }\n}\n@media (min-width: 1024px) {\n  .box {\n    background: #CED3DF;\n    color: #482AC6;\n  }\n}\n@media (min-width: 1440px) {\n  .box {\n    background: tomato;\n    color: purple;\n  }\n}\n@media (min-width: 1920px) {\n  .box {\n    background: purple;\n    color: #2BF1D3;\n    font-family: 'Georgia';\n  }\n}\n`}</style>\n<div className='box'>\n    <h1>Hello World</h1>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\n</div>\n</div>\n```\n````\n\n\n### Display a single screen size\n\n```react\nresponsive: small\nspan: 2\nstate: {clicked: 0}\n---\n<div style={{background: '#ffffff', height: '100%'}}>\n  <button onClick={() => setState({clicked: state.clicked + 1})}>\n    Clicked {state.clicked < 100 ? state.clicked : 'an unhealthy amount of'} times\n  </button>\n</div>\n```\n\n```react\nresponsive: ['medium', 'xlarge']\nspan: 4\nstate: {clicked: 0}\n---\n<div style={{background: '#ffffff', height: '100%'}}>\n  <button onClick={() => setState({clicked: state.clicked + 1})}>\n    Clicked {state.clicked < 100 ? state.clicked : 'an unhealthy amount of'} times\n  </button>\n</div>\n```"}});
//# sourceMappingURL=1.ba43deb8.chunk.js.map