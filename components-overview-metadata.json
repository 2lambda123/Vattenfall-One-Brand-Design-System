{
  "components": [
    {
      "id": "background-color",
      "uri": "/components/colors/#background-color",
      "name": "Background color",
      "description": "Similar to the contextual text color classes, easily set the background of an element to any contextual class. Anchor components will darken on hover, just like the text classes. Background utilities do not set color, so in some cases you'll want to use .text-* utilities.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "borders",
      "uri": "/components/colors/#borders",
      "name": "Borders",
      "description": "Borders can be used to separate sections of a site or service.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "colors",
      "uri": "/components/colors/#colors",
      "name": "Colors",
      "description": null,
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "all-breakpoints",
      "uri": "/components/grid/#all-breakpoints",
      "name": "All breakpoints",
      "description": "For grids that are the same from the smallest of devices to the largest, use the .vf-col and .vf-col-* classes. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to .vf-col.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "bleed-container",
      "uri": "/components/grid/#bleed-container",
      "name": "Bleed container",
      "description": "For content areas that are supposed to bleed out of the standard container.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "column-breaks",
      "uri": "/components/grid/#column-breaks",
      "name": "Column breaks",
      "description": "Breaking columns to a new line in flexbox requires a small hack: add an element with width: 100% wherever you want to wrap your columns to a new line. Normally this is accomplished with multiple .rows, but not every implementation method can account for this.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "column-wrapping",
      "uri": "/components/grid/#column-wrapping",
      "name": "Column wrapping",
      "description": "If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "equal-width",
      "uri": "/components/grid/#equal-width",
      "name": "Equal width",
      "description": "For example, here are two grid layouts that apply to every device and viewport, from xs to xl. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "equal-width-multi-row",
      "uri": "/components/grid/#equal-width-multi-row",
      "name": "Equal-width multi-row",
      "description": "Create equal-width columns that span multiple rows by inserting a .w-100 where you want the columns to break to a new line. Make the breaks responsive by mixing the .w-100 with some responsive display utilities.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "gutters",
      "uri": "/components/grid/#gutters",
      "name": "Gutters",
      "description": "Gutters can be responsively adjusted by breakpoint-specific padding and negative margin utility classes. To change the gutters in a given row, pair a negative margin utility on the .row and matching padding utilities on the .vf-cols.\n\nHere's an example of customizing the VF Design System grid at the large (lg) breakpoint and above. We've increased the .vf-col padding with .px-lg-5 and then counteracted that with .mx-lg-n5 on the parent .row.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "horizontal-alignment",
      "uri": "/components/grid/#horizontal-alignment",
      "name": "Horizontal alignment",
      "description": null,
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "how-it-works",
      "uri": "/components/grid/#how-it-works",
      "name": "How it works",
      "description": "Vattenfall's grid system uses a series of containers, rows, and columns to layout and align content. It's built with flexbox and is fully responsive. Below is an example and an in-depth look at how the grid comes together.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "margin-utilities",
      "uri": "/components/grid/#margin-utilities",
      "name": "Margin utilities",
      "description": "With the move to flexbox in v4, you can use margin utilities like .mr-auto to force sibling columns away from one another.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "mix-and-match",
      "uri": "/components/grid/#mix-and-match",
      "name": "Mix and match",
      "description": "Don't want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "no-gutters",
      "uri": "/components/grid/#no-gutters",
      "name": "No gutters",
      "description": "The gutters between columns in our predefined grid classes can be removed with .no-gutters. This removes the negative margins from .row and the horizontal padding from all immediate children columns.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "offset-classes",
      "uri": "/components/grid/#offset-classes",
      "name": "Offset classes",
      "description": "Move columns to the right using .vf-offset-md-* classes. These classes increase the left margin of a column by * columns. For example, .vf-offset-md-4 moves .vf-col-md-4 over four columns.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "order-classes",
      "uri": "/components/grid/#order-classes",
      "name": "Order classes",
      "description": "Use .order- classes for controlling the visual order of your content. These classes are responsive, so you can set the order by breakpoint (e.g., .order-1.order-md-2). Includes support for 1 through 12 across all five grid tiers.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "setting-one-column-width",
      "uri": "/components/grid/#setting-one-column-width",
      "name": "Setting one column width",
      "description": "Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "stacked-to-horizontal",
      "uri": "/components/grid/#stacked-to-horizontal",
      "name": "Stacked to horizontal",
      "description": "Using a single set of .vf-col-sm-* classes, you can create a basic grid system that starts out stacked and becomes horizontal at the small breakpoint (sm).",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "standard-container",
      "uri": "/components/grid/#standard-container",
      "name": "Standard container",
      "description": "The regular container for all standard content.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "tight-container",
      "uri": "/components/grid/#tight-container",
      "name": "Tight container",
      "description": "Used for content heavy pages etc.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "variable-width-content",
      "uri": "/components/grid/#variable-width-content",
      "name": "Variable width content",
      "description": "Use col-{breakpoint}-auto classes to size columns based on the natural width of their content.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "vertical-alignment",
      "uri": "/components/grid/#vertical-alignment",
      "name": "Vertical alignment",
      "description": null,
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "responsive-utility-classes",
      "uri": "/components/responsive/#responsive-utility-classes",
      "name": "Responsive utility classes",
      "description": "Available classes:",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "height-classes",
      "uri": "/components/sizing/#height-classes",
      "name": "Height classes",
      "description": null,
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "vh-classes",
      "uri": "/components/sizing/#vh-classes",
      "name": "VH classes",
      "description": "These classes for using percentages of the current window height are available:",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "width-classes",
      "uri": "/components/sizing/#width-classes",
      "name": "Width classes",
      "description": "Available classes: .w-25 .w-50 .w-75 .w-100 .w-auto",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "examples",
      "uri": "/components/spacing/#examples",
      "name": "Examples",
      "description": "Here are some representative examples of these classes:",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "horizontal-centering",
      "uri": "/components/spacing/#horizontal-centering",
      "name": "Horizontal centering",
      "description": "Additionally, VF Design System also includes an .mx-auto class for horizontally centering fixed-width block level content—that is, content that has display: block and a width set—by setting the horizontal margins to auto.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "negative-margin",
      "uri": "/components/spacing/#negative-margin",
      "name": "Negative margin",
      "description": "In CSS, margin properties can utilize negative values (padding cannot). As of 4.2, we've added negative margin utilities for every non-zero integer size listed above (e.g., 1, 2, 3, 4, 5). These utilities are ideal for customizing grid column gutters across breakpoints.\n\nThe syntax is nearly the same as the default, positive margin utilities, but with the addition of n before the requested size. Here's an example class that's the opposite of .mt-1:",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "notation",
      "uri": "/components/spacing/#notation",
      "name": "Notation",
      "description": "Spacing utilities that apply to all breakpoints, from xs to xl, have no breakpoint abbreviation in them. This is because those classes are applied from min-width: 0 and up, and thus are not bound by a media query. The remaining breakpoints, however, do include a breakpoint abbreviation.",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    },
    {
      "id": "vattenfall-spacings",
      "uri": "/components/spacing/#vattenfall-spacings",
      "name": "Vattenfall spacings",
      "description": "Assign responsive-friendly margin or padding values to an element or a subset of its sides with shorthand classes. Includes support for individual properties, all properties, and vertical and horizontal properties.\n\n Vattenfall uses four default custom spacers, called Small, Medium, Large and Extra Large.\n\n",
      "react": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "vue": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "angular": {
        "exists": false,
        "status": -1,
        "globalUse": false,
        "otherSupport": []
      },
      "html": {
        "exists": true,
        "status": 0,
        "globalUse": false,
        "otherSupport": []
      },
      "figmaUrl": null,
      "photoshopUrl": null,
      "adobeXDUrl": null,
      "sketchUrl": null,
      "abstractUrl": null
    }
  ]
}
